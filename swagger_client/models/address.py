# coding: utf-8

"""
    Upcall API

    A RESTful API (json) to manage your human-powered outbound call campaigns.

    OpenAPI spec version: 2
    Contact: support@upcall.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line1': 'str',
        'line2': 'str',
        'city': 'str',
        'region': 'str',
        'postal_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'line1': 'line1',
        'line2': 'line2',
        'city': 'city',
        'region': 'region',
        'postal_code': 'postal_code',
        'country': 'country'
    }

    def __init__(self, line1=None, line2=None, city=None, region=None, postal_code=None, country=None):
        """
        Address - a model defined in Swagger
        """

        self._line1 = None
        self._line2 = None
        self._city = None
        self._region = None
        self._postal_code = None
        self._country = None

        if line1 is not None:
          self.line1 = line1
        if line2 is not None:
          self.line2 = line2
        if city is not None:
          self.city = city
        if region is not None:
          self.region = region
        if postal_code is not None:
          self.postal_code = postal_code
        if country is not None:
          self.country = country

    @property
    def line1(self):
        """
        Gets the line1 of this Address.
        First address line

        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """
        Sets the line1 of this Address.
        First address line

        :param line1: The line1 of this Address.
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """
        Gets the line2 of this Address.
        Second address line

        :return: The line2 of this Address.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """
        Sets the line2 of this Address.
        Second address line

        :param line2: The line2 of this Address.
        :type: str
        """

        self._line2 = line2

    @property
    def city(self):
        """
        Gets the city of this Address.
        Address city

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address.
        Address city

        :param city: The city of this Address.
        :type: str
        """

        self._city = city

    @property
    def region(self):
        """
        Gets the region of this Address.
        Address region

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Address.
        Address region

        :param region: The region of this Address.
        :type: str
        """

        self._region = region

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Address.
        Address postal code

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Address.
        Address postal code

        :param postal_code: The postal_code of this Address.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """
        Gets the country of this Address.
        Address country

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Address.
        Address country

        :param country: The country of this Address.
        :type: str
        """

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
