# coding: utf-8

"""
    Upcall API

    A RESTful API (json) to manage your human-powered outbound call campaigns.

    OpenAPI spec version: 2
    Contact: support@upcall.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Answer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question': 'str',
        'answer_type': 'str',
        'result': 'str',
        'contact_id': 'str',
        'comment': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'contact': 'ContactAttribute'
    }

    attribute_map = {
        'question': 'question',
        'answer_type': 'answer_type',
        'result': 'result',
        'contact_id': 'contact_id',
        'comment': 'comment',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'contact': 'contact'
    }

    def __init__(self, question=None, answer_type=None, result=None, contact_id=None, comment=None, created_at=None, updated_at=None, contact=None):
        """
        Answer - a model defined in Swagger
        """

        self._question = None
        self._answer_type = None
        self._result = None
        self._contact_id = None
        self._comment = None
        self._created_at = None
        self._updated_at = None
        self._contact = None

        if question is not None:
          self.question = question
        if answer_type is not None:
          self.answer_type = answer_type
        if result is not None:
          self.result = result
        if contact_id is not None:
          self.contact_id = contact_id
        if comment is not None:
          self.comment = comment
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if contact is not None:
          self.contact = contact

    @property
    def question(self):
        """
        Gets the question of this Answer.
        Question text

        :return: The question of this Answer.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """
        Sets the question of this Answer.
        Question text

        :param question: The question of this Answer.
        :type: str
        """

        self._question = question

    @property
    def answer_type(self):
        """
        Gets the answer_type of this Answer.
        the type of response allowed for the question

        :return: The answer_type of this Answer.
        :rtype: str
        """
        return self._answer_type

    @answer_type.setter
    def answer_type(self, answer_type):
        """
        Sets the answer_type of this Answer.
        the type of response allowed for the question

        :param answer_type: The answer_type of this Answer.
        :type: str
        """
        allowed_values = ["long_answer", "multiple_checkbox", "multiple_radio", "stars", "nps", "email", "short_answer", "appointment", "phone_number", "date", "digits"]
        if answer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `answer_type` ({0}), must be one of {1}"
                .format(answer_type, allowed_values)
            )

        self._answer_type = answer_type

    @property
    def result(self):
        """
        Gets the result of this Answer.
        The answer to the question. If question.response_type nps, stars, multiple_checkbox, multiple_radio then result will contain all selected options separated by comma.

        :return: The result of this Answer.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this Answer.
        The answer to the question. If question.response_type nps, stars, multiple_checkbox, multiple_radio then result will contain all selected options separated by comma.

        :param result: The result of this Answer.
        :type: str
        """

        self._result = result

    @property
    def contact_id(self):
        """
        Gets the contact_id of this Answer.

        :return: The contact_id of this Answer.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """
        Sets the contact_id of this Answer.

        :param contact_id: The contact_id of this Answer.
        :type: str
        """

        self._contact_id = contact_id

    @property
    def comment(self):
        """
        Gets the comment of this Answer.
        The comment to the answer

        :return: The comment of this Answer.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this Answer.
        The comment to the answer

        :param comment: The comment of this Answer.
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """
        Gets the created_at of this Answer.

        :return: The created_at of this Answer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Answer.

        :param created_at: The created_at of this Answer.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Answer.

        :return: The updated_at of this Answer.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Answer.

        :param updated_at: The updated_at of this Answer.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def contact(self):
        """
        Gets the contact of this Answer.

        :return: The contact of this Answer.
        :rtype: ContactAttribute
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this Answer.

        :param contact: The contact of this Answer.
        :type: ContactAttribute
        """

        self._contact = contact

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Answer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
