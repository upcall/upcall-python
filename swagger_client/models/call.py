# coding: utf-8

"""
    Upcall API

    A RESTful API (json) to manage your human-powered outbound call campaigns.

    OpenAPI spec version: 2
    Contact: support@upcall.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Call(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caller_id': 'str',
        'contact_id': 'str',
        'caller_name': 'str',
        'note': 'str',
        'status': 'str',
        'duration': 'int',
        'called_at': 'datetime',
        'campaigner_cost': 'float'
    }

    attribute_map = {
        'caller_id': 'caller_id',
        'contact_id': 'contact_id',
        'caller_name': 'caller_name',
        'note': 'note',
        'status': 'status',
        'duration': 'duration',
        'called_at': 'called_at',
        'campaigner_cost': 'campaigner_cost'
    }

    def __init__(self, caller_id=None, contact_id=None, caller_name=None, note=None, status=None, duration=None, called_at=None, campaigner_cost=None):
        """
        Call - a model defined in Swagger
        """

        self._caller_id = None
        self._contact_id = None
        self._caller_name = None
        self._note = None
        self._status = None
        self._duration = None
        self._called_at = None
        self._campaigner_cost = None

        self.caller_id = caller_id
        self.contact_id = contact_id
        if caller_name is not None:
          self.caller_name = caller_name
        if note is not None:
          self.note = note
        self.status = status
        if duration is not None:
          self.duration = duration
        if called_at is not None:
          self.called_at = called_at
        if campaigner_cost is not None:
          self.campaigner_cost = campaigner_cost

    @property
    def caller_id(self):
        """
        Gets the caller_id of this Call.

        :return: The caller_id of this Call.
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """
        Sets the caller_id of this Call.

        :param caller_id: The caller_id of this Call.
        :type: str
        """
        if caller_id is None:
            raise ValueError("Invalid value for `caller_id`, must not be `None`")

        self._caller_id = caller_id

    @property
    def contact_id(self):
        """
        Gets the contact_id of this Call.

        :return: The contact_id of this Call.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """
        Sets the contact_id of this Call.

        :param contact_id: The contact_id of this Call.
        :type: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def caller_name(self):
        """
        Gets the caller_name of this Call.
        name of the caller

        :return: The caller_name of this Call.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """
        Sets the caller_name of this Call.
        name of the caller

        :param caller_name: The caller_name of this Call.
        :type: str
        """

        self._caller_name = caller_name

    @property
    def note(self):
        """
        Gets the note of this Call.
        additional notes about the call

        :return: The note of this Call.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Call.
        additional notes about the call

        :param note: The note of this Call.
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """
        Gets the status of this Call.
        Call status

        :return: The status of this Call.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Call.
        Call status

        :param status: The status of this Call.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["busy", "no_answer", "no_service", "technical_issue", "ivr", "fax", "voicemail", "wrong_voicemail", "call_back_later", "hungup", "dnc", "wrong_number", "gatekeeper", "dropped", "alternative_phone", "not_interested", "maybe_interested", "completed", "speaking"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def duration(self):
        """
        Gets the duration of this Call.
        call duration in seconds

        :return: The duration of this Call.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Call.
        call duration in seconds

        :param duration: The duration of this Call.
        :type: int
        """

        self._duration = duration

    @property
    def called_at(self):
        """
        Gets the called_at of this Call.
        called at date

        :return: The called_at of this Call.
        :rtype: datetime
        """
        return self._called_at

    @called_at.setter
    def called_at(self, called_at):
        """
        Sets the called_at of this Call.
        called at date

        :param called_at: The called_at of this Call.
        :type: datetime
        """

        self._called_at = called_at

    @property
    def campaigner_cost(self):
        """
        Gets the campaigner_cost of this Call.
        cost of the campaigner

        :return: The campaigner_cost of this Call.
        :rtype: float
        """
        return self._campaigner_cost

    @campaigner_cost.setter
    def campaigner_cost(self, campaigner_cost):
        """
        Sets the campaigner_cost of this Call.
        cost of the campaigner

        :param campaigner_cost: The campaigner_cost of this Call.
        :type: float
        """

        self._campaigner_cost = campaigner_cost

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Call):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
