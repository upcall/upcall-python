# coding: utf-8

"""
    Upcall API

    A RESTful API (json) to manage your human-powered outbound call campaigns.

    OpenAPI spec version: 2
    Contact: support@upcall.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Question(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'question': 'str',
        'answer_type': 'str',
        'result': 'str',
        'explanations': 'str',
        'comment': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'position': 'int',
        'commission': 'float'
    }

    attribute_map = {
        'id': 'id',
        'question': 'question',
        'answer_type': 'answer_type',
        'result': 'result',
        'explanations': 'explanations',
        'comment': 'comment',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'position': 'position',
        'commission': 'commission'
    }

    def __init__(self, id=None, question=None, answer_type=None, result=None, explanations=None, comment=None, created_at=None, updated_at=None, position=None, commission=None):
        """
        Question - a model defined in Swagger
        """

        self._id = None
        self._question = None
        self._answer_type = None
        self._result = None
        self._explanations = None
        self._comment = None
        self._created_at = None
        self._updated_at = None
        self._position = None
        self._commission = None

        if id is not None:
          self.id = id
        if question is not None:
          self.question = question
        if answer_type is not None:
          self.answer_type = answer_type
        if result is not None:
          self.result = result
        if explanations is not None:
          self.explanations = explanations
        if comment is not None:
          self.comment = comment
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if position is not None:
          self.position = position
        if commission is not None:
          self.commission = commission

    @property
    def id(self):
        """
        Gets the id of this Question.

        :return: The id of this Question.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Question.

        :param id: The id of this Question.
        :type: str
        """

        self._id = id

    @property
    def question(self):
        """
        Gets the question of this Question.
        Question text

        :return: The question of this Question.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """
        Sets the question of this Question.
        Question text

        :param question: The question of this Question.
        :type: str
        """

        self._question = question

    @property
    def answer_type(self):
        """
        Gets the answer_type of this Question.
        the type of response allowed for the question

        :return: The answer_type of this Question.
        :rtype: str
        """
        return self._answer_type

    @answer_type.setter
    def answer_type(self, answer_type):
        """
        Sets the answer_type of this Question.
        the type of response allowed for the question

        :param answer_type: The answer_type of this Question.
        :type: str
        """
        allowed_values = ["long_answer", "multiple_checkbox", "multiple_radio", "stars", "nps", "email", "short_answer", "appointment", "phone_number", "date", "digits"]
        if answer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `answer_type` ({0}), must be one of {1}"
                .format(answer_type, allowed_values)
            )

        self._answer_type = answer_type

    @property
    def result(self):
        """
        Gets the result of this Question.
        The answer to the question. If question.response_type nps, stars, multiple_checkbox, multiple_radio then result will contain all selected options separated by comma.

        :return: The result of this Question.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this Question.
        The answer to the question. If question.response_type nps, stars, multiple_checkbox, multiple_radio then result will contain all selected options separated by comma.

        :param result: The result of this Question.
        :type: str
        """

        self._result = result

    @property
    def explanations(self):
        """
        Gets the explanations of this Question.
        Explanation for question

        :return: The explanations of this Question.
        :rtype: str
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """
        Sets the explanations of this Question.
        Explanation for question

        :param explanations: The explanations of this Question.
        :type: str
        """

        self._explanations = explanations

    @property
    def comment(self):
        """
        Gets the comment of this Question.

        :return: The comment of this Question.
        :rtype: bool
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this Question.

        :param comment: The comment of this Question.
        :type: bool
        """

        self._comment = comment

    @property
    def created_at(self):
        """
        Gets the created_at of this Question.

        :return: The created_at of this Question.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Question.

        :param created_at: The created_at of this Question.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Question.

        :return: The updated_at of this Question.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Question.

        :param updated_at: The updated_at of this Question.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def position(self):
        """
        Gets the position of this Question.
        Question's position

        :return: The position of this Question.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Question.
        Question's position

        :param position: The position of this Question.
        :type: int
        """

        self._position = position

    @property
    def commission(self):
        """
        Gets the commission of this Question.
        Question's commission

        :return: The commission of this Question.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """
        Sets the commission of this Question.
        Question's commission

        :param commission: The commission of this Question.
        :type: float
        """

        self._commission = commission

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Question):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
